<!--
  ~ Copyright 2009 Denys Pavlov, Igor Azarnyi
  ~
  ~    Licensed under the Apache License, Version 2.0 (the "License");
  ~    you may not use this file except in compliance with the License.
  ~    You may obtain a copy of the License at
  ~
  ~        http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~    Unless required by applicable law or agreed to in writing, software
  ~    distributed under the License is distributed on an "AS IS" BASIS,
  ~    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~    See the License for the specific language governing permissions and
  ~    limitations under the License.
  -->

<!--
    Schema for all import descriptor files.

    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="http://www.yes-cart.org/schema/import-descriptor-csv.xsd"

    This namespace is not actually pointing to the URL for schema, so you need to
    create an alias in your IDE that would point that namespace to this file.

    @author D.Pavlov
 -->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">

    <xs:element name="import-descriptor" type="ImportDescriptorType"/>

    <xs:complexType name="ImportDescriptorType">
        <xs:annotation>
            <xs:documentation>
                Defines the schema for how to represent an import descriptor.
                In general it maps and entity type (by interface) to columns in
                tuples source (e.g. a CSV file).

                File descriptor section specifies file specific configurations and columns
                define the actual mapping for columns to entity type.

                select-sql defines query that is to be used to look up existing object (HSQL)
                insert-sql defines a native insert query to improve performance (NATIVE SQL)
                It is possible to write several statement and they should be separated by ";\n"
                (semi-colon followed by a new line)

                Syntax for queries follows either native SQL or HSQL with parameters
                specified as column names in curly brackets.
                e.g.
                    HSQL: select c from CategoryEntity c where c.guid = {guid}
                    SQL : insert into TCATEGORY (GUID) values ('{guid}')
                Note the difference that '' are necessary for native SQL but not for HSQL.
                There are special placeholders in addition to {column} placeholders:
                1. {masterObjectId} PK of the master object
                2. {masterObject} master instance (for use with HSQL)
                3. {GUID} auto generated guid (for use with native SQL inserts)
                4. {contextShop} Shop instance by code
                5. {contextShopId} Shop instance by ID
                6. {contextShopCode} Descriptor's shop code from context
                7. {NOW} Now in java.time.LocalDateTime
                8. {DATE} Now in java.time.LocalDate
                9. {INSTANT} Now in java.time.Instant
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="mode" type="ImportModeType" minOccurs="0"/>
            <xs:element name="context" type="ContextType" minOccurs="0"/>
            <xs:element name="entity-type" type="xs:string" minOccurs="1"/>
            <xs:element name="import-file-descriptor" type="ImportFileDescriptorType" minOccurs="1"/>
            <xs:choice>
                <xs:element name="select-sql" type="xs:string" minOccurs="0"/>
                <xs:element name="select-cmd" type="xs:string" minOccurs="0"/>
            </xs:choice>
            <xs:choice>
                <xs:element name="insert-sql" type="xs:string" minOccurs="0"/>
                <xs:element name="insert-cmd" type="xs:string" minOccurs="0"/>
            </xs:choice>
            <xs:choice>
                <xs:element name="delete-sql" type="xs:string" minOccurs="0"/>
                <xs:element name="delete-cmd" type="xs:string" minOccurs="0"/>
            </xs:choice>
            <xs:element name="import-columns" type="ImportColumnsType" minOccurs="1"/>
        </xs:sequence>

    </xs:complexType>


    <xs:complexType name="ContextType">
        <xs:annotation>
            <xs:documentation>
                Context defines additional runtime constraints.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="1">
                <xs:element name="shop-code" type="xs:string" minOccurs="0"/>
                <xs:element name="shop-code-column" type="xs:string" minOccurs="0"/>
            </xs:choice>
        </xs:sequence>
    </xs:complexType>


    <xs:simpleType name="ImportModeType">
        <xs:annotation>
            <xs:documentation>
                This constraint corresponds to org.yes.cart.bulkimport.model.ImportDescriptor.ImportMode.

                Default mode is MERGE (if not specified).

                MERGE       : creates and updates entries
                DELETE      : resolves entity and deletes it
                INSERT_ONLY : creates entity if it is not existent, otherwise does nothing
                UPDATE_ONLY : updates entity if it exists, otherwise does nothing
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="MERGE"/>
            <xs:enumeration value="DELETE"/>
            <xs:enumeration value="INSERT_ONLY"/>
            <xs:enumeration value="UPDATE_ONLY"/>
        </xs:restriction>
    </xs:simpleType>


    <xs:complexType name="ImportFileDescriptorType">
        <xs:annotation>
            <xs:documentation>
                Filemask is important aspect of the import descriptor since when uploading a zip file
                with many sources this mask will filter out only relevant files applicable to this
                import descriptor.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="file-encoding" type="xs:string"/>
            <xs:element name="file-name-mask" type="xs:string"/>
            <xs:element name="ignore-first-line" type="xs:boolean"/>
            <xs:element name="column-delimiter" type="xs:string"/>
            <xs:element name="text-qualifier" type="xs:string"/>
        </xs:sequence>
    </xs:complexType>


    <xs:complexType name="ImportColumnsType">
        <xs:sequence>
            <xs:element name="column-descriptor" minOccurs="1" maxOccurs="unbounded" type="ImportColumnType"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="ImportColumnType">
        <xs:annotation>
            <xs:documentation>
                Column index defines the index of a column in a tuple that is represented by
                a property with name (i.e. name element) on the entity type. Say mapping
                column-index = 0 and name = code means that 0th column in import tuple is mapped
                to code property on the entity to be imported.

                If language defines the values will be attempted to be inserted as a i18n.
                The language specified must be exactly the same configuration as Locale used by
                YeS (Yes Shop).

                Field type defines what type of field this is and will define the import strategy
                for that field (e.g. FK_FIELD would fetch a parent entity using lookup-query).
                For FK field entity-type must be specified to auto generate parent dependencies.

                Value regex allows to extract data from the column to allow more control over what
                gets imported into entity. By default group 1 is selected as the value but it is possible
                to define custom group by specifying regex group element.

                Constants just mean that some columns will be prepopulated with values. This is
                useful in some case, as for example setting default online properties for products.

                Lookup query is used to check if the entity exists for normal fields or to retrieve
                parent entities for FK fields. The query syntax follows HSQL (Hibernate) syntax
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="column-index" type="xs:int"/>
            <xs:element name="field-type" type="xs:string">
                <xs:annotation>
                    <xs:documentation>
                        This field must correspond to org.yes.cart.bulkcommon.csv.ImpExColumn constants.
                        I.e. FIELD, FK_FIELD, SLAVE_INLINE_FIELD, SLAVE_TUPLE_FIELD
                        This field is not restricted to allow more flexibility in custom implementations
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="data-type" type="xs:string" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>
                        This field must correspond to org.yes.cart.bulkcommon.model.ImpExValues constants.
                        I.e. STRING, BOOLEAN, LONG, INT, DECIMAL, DATE, DATETIME, ZONEDTIME, INSTANT
                        This field is not restricted to allow more flexibility in custom implementations
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="entity-type" type="xs:string" minOccurs="0"/>
            <xs:element name="name" type="xs:string"/>
            <xs:element name="language" type="xs:string" minOccurs="0"/>
            <xs:element name="context" type="xs:string" minOccurs="0"/>
            <xs:element name="value-regex" type="xs:string" minOccurs="0"/>
            <xs:choice minOccurs="0" maxOccurs="1">
                <xs:element name="value-regex-group" type="xs:string" minOccurs="0"/>
                <xs:element name="value-regex-template" type="xs:string" minOccurs="0"/>
            </xs:choice>
            <xs:element name="value-constant" type="xs:string" minOccurs="0"/>
            <xs:element name="lookup-query" type="xs:string" minOccurs="0"/>
            <xs:element name="use-master-object" type="xs:boolean" minOccurs="0"/>
            <xs:element name="insert-only" type="xs:boolean" minOccurs="0"/>
            <xs:element name="update-only" type="xs:boolean" minOccurs="0"/>
            <xs:element name="update-skip-unresolved" type="xs:boolean" minOccurs="0"/>
            <xs:element name="import-descriptor" type="ImportDescriptorType" minOccurs="0"/>
        </xs:sequence>
    </xs:complexType>
</xs:schema>
