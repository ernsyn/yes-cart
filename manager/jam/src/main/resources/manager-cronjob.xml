<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ Copyright 2009 Denys Pavlov, Igor Azarnyi
  ~
  ~    Licensed under the Apache License, Version 2.0 (the "License");
  ~    you may not use this file except in compliance with the License.
  ~    You may obtain a copy of the License at
  ~
  ~        http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~    Unless required by applicable law or agreed to in writing, software
  ~    distributed under the License is distributed on an "AS IS" BASIS,
  ~    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~    See the License for the specific language governing permissions and
  ~    limitations under the License.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd">

    <import resource="classpath:core-manager-cronjob.xml"/>
    <import resource="classpath:core-export-cronjob.xml"/>
    <import resource="classpath:core-orderstate-cronjob.xml"/>

    <!-- ################################ Pre order inventory scanning  ###################################### -->

    <bean name="preorderJob" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass" value="org.yes.cart.bulkjob.cron.YcCronJob" />
        <property name="jobDataAsMap">
            <map>
                <entry key="jobName" value="Inventory Awaiting Delivery Processing" />
                <entry key="job" value-ref="bulkAwaitingInventoryDeliveriesProcessor" />
                <entry key="nodeService" value-ref="nodeService" />
            </map>
        </property>
    </bean>

    <bean id="preOrderJobCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="preorderJob" />
        <property name="cronExpression" value="${admin.cron.preorderJob}" />
    </bean>

    <!-- ################################ Backorder/Delivery notifications  ################################# -->

    <bean name="deliveryInfoUpdateJob" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass" value="org.yes.cart.bulkjob.cron.YcCronJob" />
        <property name="jobDataAsMap">
            <map>
                <entry key="jobName" value="Order Delivery Information Update Processing" />
                <entry key="job" value-ref="orderDeliveryInfoUpdateProcessor" />
                <entry key="nodeService" value-ref="nodeService" />
            </map>
        </property>
    </bean>

    <bean id="deliveryInfoUpdateJobCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="deliveryInfoUpdateJob" />
        <property name="cronExpression" value="${admin.cron.deliveryInfoUpdateJob}" />
    </bean>

    <!-- ################################ AutoExport notifications  ################################# -->

    <bean name="orderAutoExportProcessorJob" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass" value="org.yes.cart.bulkjob.cron.YcCronJob" />
        <property name="jobDataAsMap">
            <map>
                <entry key="jobName" value="Order Auto Export Processing" />
                <entry key="job" value-ref="orderAutoExportProcessor" />
                <entry key="nodeService" value-ref="nodeService" />
            </map>
        </property>
    </bean>

    <bean id="orderAutoExportProcessorJobCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="orderAutoExportProcessorJob" />
        <property name="cronExpression" value="${admin.cron.orderAutoExportProcessorJob}" />
    </bean>

    <!-- ################################ Abandon shopping cart clean up  ################################### -->

    <bean name="abandonedShoppingCartJob" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass" value="org.yes.cart.bulkjob.cron.YcCronJob" />
        <property name="jobDataAsMap">
            <map>
                <entry key="jobName" value="Abandoned Shopping Cart State Clean Up" />
                <entry key="job" value-ref="bulkAbandonedShoppingCartProcessor" />
                <entry key="nodeService" value-ref="nodeService" />
            </map>
        </property>
    </bean>

    <bean id="abandonedShoppingCartJobCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="abandonedShoppingCartJob" />
        <property name="cronExpression" value="${admin.cron.abandonedShoppingCartJob}" />
    </bean>

    <bean name="emptyAnonymousShoppingCartJob" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass" value="org.yes.cart.bulkjob.cron.YcCronJob" />
        <property name="jobDataAsMap">
            <map>
                <entry key="jobName" value="Empty Anonymous Shopping Cart State Clean Up" />
                <entry key="job" value-ref="bulkEmptyAnonymousShoppingCartProcessor" />
                <entry key="nodeService" value-ref="nodeService" />
            </map>
        </property>
    </bean>

    <bean id="emptyAnonymousShoppingCartJobCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="emptyAnonymousShoppingCartJob" />
        <property name="cronExpression" value="${admin.cron.emptyAnonymousShoppingCartJob}" />
    </bean>

    <!-- ################################ Remove obsolete products  ######################################### -->

    <bean name="removeObsoleteProductProcessorJob" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass" value="org.yes.cart.bulkjob.cron.YcCronJob" />
        <property name="jobDataAsMap">
            <map>
                <entry key="jobName" value="Remove obsolete products" />
                <entry key="job" value-ref="removeObsoleteProductProcessor" />
                <entry key="nodeService" value-ref="nodeService" />
            </map>
        </property>
    </bean>

    <bean id="removeObsoleteProductProcessorJobCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="removeObsoleteProductProcessorJob" />
        <property name="cronExpression" value="${admin.cron.removeObsoleteProductProcessorJob}" />
    </bean>

    <!-- ################################ Expired guest accounts  ########################################### -->

    <bean name="expiredGuestsJob" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass" value="org.yes.cart.bulkjob.cron.YcCronJob" />
        <property name="jobDataAsMap">
            <map>
                <entry key="jobName" value="Expired Guest Accounts Clean Up" />
                <entry key="job" value-ref="bulkExpiredGuestsProcessor" />
                <entry key="nodeService" value-ref="nodeService" />
            </map>
        </property>
    </bean>

    <bean id="expiredGuestsJobCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="expiredGuestsJob" />
        <property name="cronExpression" value="${admin.cron.expiredGuestsJob}" />
    </bean>

    <!-- ################################ Customer tagging  ################################################# -->

    <bean name="customerTagJob" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass" value="org.yes.cart.bulkjob.cron.YcCronJob" />
        <property name="jobDataAsMap">
            <map>
                <entry key="jobName" value="Customer Tagging" />
                <entry key="job" value-ref="bulkCustomerTagProcessor" />
                <entry key="nodeService" value-ref="nodeService" />
            </map>
        </property>
    </bean>

    <bean id="customerTagJobCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="customerTagJob" />
        <property name="cronExpression" value="${admin.cron.customerTagJob}" />
    </bean>

    <!-- ################################ Bulk email  ###################################################### -->

    <bean id="bulkMailProcessor" class="org.yes.cart.bulkjob.cron.ConfiguredPausableProcessorWrapperImpl">
        <property name="processor">
            <bean class="org.yes.cart.bulkjob.mail.BulkMailProcessorImpl">
                <constructor-arg index="0" ref="mailService"/>
                <constructor-arg index="1" ref="mailComposer"/>
                <constructor-arg index="2" ref="mailSenderFactory"/>
                <property name="delayBetweenEmailsMs" value="${admin.mail.delay-between-emails-ms}"/>
                <property name="cycleExceptionsThreshold" value="${admin.mail.exceptions-threshold}3"/>
            </bean>
        </property>
        <property name="systemService" ref="systemService"/>
        <property name="pausePreferenceKey" value="JOB_SEND_MAIL_PAUSE"/>
        <property name="pausePreferenceDefault" value="true"/>
        <property name="cfgContext">
            <bean class="org.yes.cart.config.impl.ConfigurationContextImpl">
                <property name="functionalArea" value="core"/>
                <property name="name" value="bulkMailProcessor"/>
                <property name="cfgInterface" value="Runnable"/>
                <property name="cfgDefault" value="false"/>
                <property name="properties">
                    <props>
                        <prop key="extension">Pausable cron job</prop>
                        <prop key="description">Recurring job that sends prepared emails. Can be customised per shop.</prop>
                        <prop key="SYSTEM[JOB_SEND_MAIL_PAUSE]">Pause</prop>
                        <prop key="SHOP[SHOP_MAIL_SERVER_CUSTOM_ENABLE]">Enable custom settings flag</prop>
                        <prop key="SHOP[SHOP_MAIL_SERVER_HOST]">Mail server host</prop>
                        <prop key="SHOP[SHOP_MAIL_SERVER_PORT]">Mail server port</prop>
                        <prop key="SHOP[SHOP_MAIL_SERVER_USERNAME]">Username (if auth enabled)</prop>
                        <prop key="SHOP[SHOP_MAIL_SERVER_PASSWORD]">Password (if auth enabled)</prop>
                        <prop key="SHOP[SHOP_MAIL_SERVER_SMTPAUTH_ENABLE]">Enable authentication</prop>
                        <prop key="SHOP[SHOP_MAIL_SERVER_STARTTLS_ENABLE]">Use TLS for connection</prop>
                    </props>
                </property>
            </bean>
        </property>
    </bean>

    <bean name="sendMailJob" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass" value="org.yes.cart.bulkjob.cron.YcCronJob" />
        <property name="jobDataAsMap">
            <map>
                <entry key="jobName" value="Send Mail" />
                <entry key="job" value-ref="bulkMailProcessor" />
                <entry key="nodeService" value-ref="nodeService" />
            </map>
        </property>
    </bean>

    <bean id="sendMailJobCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="sendMailJob" />
        <property name="cronExpression" value="${admin.cron.sendMailJob}" />
    </bean>

    <!-- ################################ Auto Import  ###################################################### -->

    <bean id="autoImportListener" class="org.yes.cart.bulkjob.cron.ConfiguredPausableProcessorWrapperImpl">
        <property name="processor">
            <bean class="org.yes.cart.bulkjob.bulkimport.LocalFileShareImportListenerImpl">
                <constructor-arg index="0" ref="shopService"/>
                <constructor-arg index="1" ref="bulkImportService"/>
                <constructor-arg index="2" ref="reindexService"/>
                <constructor-arg index="3" ref="clusterService"/>
                <constructor-arg index="4" ref="webAppManagerAsyncContextFactory"/>
                <constructor-arg index="5" ref="systemService"/>
                <constructor-arg index="6" ref="runtimeAttributeService"/>
                <constructor-arg index="7" ref="authenticationManager"/>
            </bean>
        </property>
        <property name="systemService" ref="systemService"/>
        <property name="pausePreferenceKey" value="JOB_LOCAL_FILE_IMPORT_PAUSE"/>
        <property name="pausePreferenceDefault" value="true"/>
        <property name="cfgContext">
            <bean class="org.yes.cart.config.impl.ConfigurationContextImpl">
                <property name="functionalArea" value="impex"/>
                <property name="name" value="autoImportListener"/>
                <property name="cfgInterface" value="Runnable"/>
                <property name="cfgDefault" value="false"/>
                <property name="properties">
                    <props>
                        <prop key="extension">Pausable cron job</prop>
                        <prop key="description">Recurring job that runs CSV autoimport using configuration file (config.properties).</prop>
                        <prop key="SYSTEM[JOB_LOCAL_FILE_IMPORT_PAUSE]">Pause</prop>
                        <prop key="SYSTEM[JOB_LOCAL_FILE_IMPORT_FS_ROOT]">Auto import root directory (see documentation for detailed setup instructions)</prop>
                    </props>
                </property>
            </bean>
        </property>
    </bean>

    <bean name="autoImportJob" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass" value="org.yes.cart.bulkjob.cron.YcCronJob" />
        <property name="jobDataAsMap">
            <map>
                <entry key="jobName" value="Auto Import" />
                <entry key="job" value-ref="autoImportListener" />
                <entry key="nodeService" value-ref="nodeService" />
            </map>
        </property>
    </bean>

    <bean id="autoImportJobCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="autoImportJob" />
        <property name="cronExpression" value="${admin.cron.autoImportJob}" />
    </bean>

    <!-- ################################ Image vault processors  ################################################### -->


    <bean id="imageVaultProcessor" class="org.yes.cart.bulkjob.cron.ConfiguredPausableProcessorWrapperImpl">
        <property name="processor">
            <bean class="org.yes.cart.bulkjob.images.LocalFileShareImageVaultProcessorImpl">
                <constructor-arg index="0" ref="systemService"/>
                <constructor-arg index="1" ref="ioProviderFactory"/>
                <constructor-arg index="2">
                    <array>
                        <ref bean="categoryImageNameStrategy"/>
                        <ref bean="contentImageNameStrategy"/>
                        <ref bean="brandImageNameStrategy"/>
                        <ref bean="productImageNameStrategy"/>
                        <ref bean="shopImageNameStrategy"/>
                    </array>
                </constructor-arg>
                <constructor-arg index="3">
                    <array>
                        <bean id="imageVaultProcessorCategoryImageImportDomainObjectStrategy" class="org.yes.cart.bulkimport.image.impl.CategoryImageImportDomainObjectStrategyImpl">
                            <constructor-arg index="0" ref="importFederationFacade"/>
                            <constructor-arg index="1" ref="categoryService"/>
                            <constructor-arg index="2" ref="attributeService"/>
                            <property name="insertOnly" value="true"/>
                        </bean>

                        <bean id="imageVaultProcessorContentImageImportDomainObjectStrategy" class="org.yes.cart.bulkimport.image.impl.ContentImageImportDomainObjectStrategyImpl">
                            <constructor-arg index="0" ref="importFederationFacade"/>
                            <constructor-arg index="1" ref="contentService"/>
                            <constructor-arg index="2" ref="attributeService"/>
                            <property name="insertOnly" value="true"/>
                        </bean>

                        <bean id="imageVaultProcessorBrandImageImportDomainObjectStrategy" class="org.yes.cart.bulkimport.image.impl.BrandImageImportDomainObjectStrategyImpl">
                            <constructor-arg index="0" ref="importFederationFacade"/>
                            <constructor-arg index="1" ref="brandService"/>
                            <constructor-arg index="2" ref="attributeService"/>
                            <property name="insertOnly" value="true"/>
                        </bean>

                        <bean id="imageVaultProcessorShopImageImportDomainObjectStrategy" class="org.yes.cart.bulkimport.image.impl.ShopImageImportDomainObjectStrategyImpl">
                            <constructor-arg index="0" ref="importFederationFacade"/>
                            <constructor-arg index="1" ref="shopService"/>
                            <constructor-arg index="2" ref="attributeService"/>
                            <property name="insertOnly" value="true"/>
                        </bean>

                        <bean id="imageVaultProcessorProductImageImportDomainObjectStrategy" class="org.yes.cart.bulkimport.image.impl.ProductImageImportDomainObjectStrategyImpl">
                            <constructor-arg index="0" ref="importFederationFacade"/>
                            <constructor-arg index="1" ref="productService"/>
                            <constructor-arg index="2" ref="attributeService"/>
                            <property name="insertOnly" value="true"/>
                        </bean>

                        <bean id="imageVaultProcessorProductSkuImageImportDomainObjectStrategy" class="org.yes.cart.bulkimport.image.impl.ProductSkuImageImportDomainObjectStrategyImpl">
                            <constructor-arg index="0" ref="importFederationFacade"/>
                            <constructor-arg index="1" ref="productSkuService"/>
                            <constructor-arg index="2" ref="attributeService"/>
                            <property name="insertOnly" value="true"/>
                        </bean>
                    </array>
                </constructor-arg>
                <constructor-arg index="4" ref="reindexService"/>
                <constructor-arg index="5" ref="clusterService"/>
                <constructor-arg index="6" ref="webAppManagerAsyncContextFactory"/>
                <constructor-arg index="7" ref="runtimeAttributeService"/>
                <constructor-arg index="8" ref="authenticationManager"/>
            </bean>
        </property>
        <property name="systemService" ref="systemService"/>
        <property name="pausePreferenceKey" value="JOB_LOCAL_IMAGEVAULT_SCAN_PAUSE"/>
        <property name="pausePreferenceDefault" value="true"/>
        <property name="cfgContext">
            <bean class="org.yes.cart.config.impl.ConfigurationContextImpl">
                <property name="functionalArea" value="pim"/>
                <property name="name" value="imageVaultProcessor"/>
                <property name="cfgInterface" value="Runnable"/>
                <property name="cfgDefault" value="false"/>
                <property name="properties">
                    <props>
                        <prop key="extension">Pausable cron job</prop>
                        <prop key="description">Utility to re-attach images to products by scanning filenames and creating product image attributes (Requires credentials in config.properties at root of image vault)</prop>
                        <prop key="SYSTEM[JOB_LOCAL_IMAGEVAULT_SCAN_PAUSE]">Pause</prop>
                    </props>
                </property>
            </bean>
        </property>
    </bean>

    <bean name="imageVaultProcessorJob" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass" value="org.yes.cart.bulkjob.cron.YcCronJob" />
        <property name="jobDataAsMap">
            <map>
                <entry key="jobName" value="Image Vault Scanner" />
                <entry key="job" value-ref="imageVaultProcessor" />
                <entry key="nodeService" value-ref="nodeService" />
            </map>
        </property>
    </bean>

    <bean id="imageVaultProcessorJobCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="imageVaultProcessorJob" />
        <property name="cronExpression" value="${admin.cron.imageVaultProcessorJob}" />
    </bean>


    <bean id="productImageVaultCleanupProcessor" class="org.yes.cart.bulkjob.cron.ConfiguredPausableProcessorWrapperImpl">
        <property name="processor">
            <bean class="org.yes.cart.bulkjob.images.LocalFileShareProductImageVaultCleanupProcessorImpl">
                <constructor-arg index="0" ref="systemService"/>
                <constructor-arg index="1" ref="ioProviderFactory"/>
                <constructor-arg index="2" ref="productService"/>
                <property name="processingModeAttribute" value="JOB_LOCAL_PRODIMAGEVAULT_CLEAN_MODE"/>
            </bean>
        </property>
        <property name="systemService" ref="systemService"/>
        <property name="pausePreferenceKey" value="JOB_LOCAL_PRODIMAGECLEAN_SCAN_PAUSE"/>
        <property name="pausePreferenceDefault" value="true"/>
        <property name="cfgContext">
            <bean class="org.yes.cart.config.impl.ConfigurationContextImpl">
                <property name="functionalArea" value="pim"/>
                <property name="name" value="productImageVaultCleanupProcessor"/>
                <property name="cfgInterface" value="Runnable"/>
                <property name="cfgDefault" value="false"/>
                <property name="properties">
                    <props>
                        <prop key="extension">Pausable cron job</prop>
                        <prop key="description">Utility to to scan imagevault/product and remove all images for products that do not exist</prop>
                        <prop key="SYSTEM[JOB_LOCAL_PRODIMAGEVAULT_CLEAN_PAUSE]">Pause</prop>
                        <prop key="SYSTEM[JOB_LOCAL_PRODIMAGEVAULT_CLEAN_MODE]">SCAN (logging only) or DELETE (removes the orphan image files)</prop>
                    </props>
                </property>
            </bean>
        </property>
    </bean>


    <bean name="productImageVaultCleanupProcessorJob" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass" value="org.yes.cart.bulkjob.cron.YcCronJob" />
        <property name="jobDataAsMap">
            <map>
                <entry key="jobName" value="Product Image Vault Clean Up" />
                <entry key="job" value-ref="productImageVaultCleanupProcessor" />
                <entry key="nodeService" value-ref="nodeService" />
            </map>
        </property>
    </bean>

    <bean id="productImageVaultCleanupProcessorJobCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="productImageVaultCleanupProcessorJob" />
        <property name="cronExpression" value="${admin.cron.productImageVaultCleanupProcessorJob}" />
    </bean>


    <!-- ################################ Cache eviction propagation  ######################################## -->


    <bean id="cacheEvictionQueueProcessor" class="org.yes.cart.bulkjob.cron.ConfiguredPausableProcessorWrapperImpl">
        <property name="processor">
            <bean class="org.yes.cart.bulkjob.cache.CacheEvictionQueueProcessorImpl">
                <property name="nodeService" ref="nodeService"/>
                <property name="asyncContextFactory" ref="webAppManagerAsyncContextFactory"/>
                <property name="cacheEvictionQueue" ref="cacheEvictionQueue"/>
            </bean>
        </property>
        <property name="systemService" ref="systemService"/>
        <property name="pausePreferenceKey" value="JOB_CACHE_EVICT_PAUSE"/>
        <property name="pausePreferenceDefault" value="false"/>
        <property name="cfgContext">
            <bean class="org.yes.cart.config.impl.ConfigurationContextImpl">
                <property name="functionalArea" value="core"/>
                <property name="name" value="cacheEvictionQueueProcessor"/>
                <property name="cfgInterface" value="Runnable"/>
                <property name="cfgDefault" value="false"/>
                <property name="properties">
                    <props>
                        <prop key="extension">Pausable cron job</prop>
                        <prop key="description">Performs bulk cache evictions on frontend servers.</prop>
                        <prop key="SYSTEM[JOB_CACHE_EVICT_PAUSE]">Pause</prop>
                    </props>
                </property>
            </bean>
        </property>
    </bean>

    <bean name="cacheEvictionQueueJob" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass" value="org.yes.cart.bulkjob.cron.YcCronJob" />
        <property name="jobDataAsMap">
            <map>
                <entry key="jobName" value="Evict frontend cache" />
                <entry key="job" value-ref="cacheEvictionQueueProcessor" />
                <entry key="nodeService" value-ref="nodeService" />
            </map>
        </property>
    </bean>

    <bean id="cacheEvictionQueueJobCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="cacheEvictionQueueJob" />
        <property name="cronExpression" value="${admin.cron.cacheEvictionQueueJob}" />
    </bean>

    <!-- ################################ Scheduler  ####################################################### -->


    <bean id="quartzSysPropsSkipUpdateCheck1" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetClass" value="java.lang.System"/>
        <property name="targetMethod" value="setProperty"/>
        <property name="arguments">
            <list>
                <value>org.quartz.scheduler.skipUpdateCheck</value>
                <value>true</value>
            </list>
        </property>
    </bean>

    <bean id="quartzSysPropsSkipUpdateCheck2" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetClass" value="java.lang.System"/>
        <property name="targetMethod" value="setProperty"/>
        <property name="arguments">
            <list>
                <value>org.terracotta.quartz.skipUpdateCheck</value>
                <value>true</value>
            </list>
        </property>
    </bean>

    <bean id="managerCronScheduleTriggers" class="org.yes.cart.utils.spring.ArrayListBean">
        <constructor-arg>
            <list>
                <ref bean="cacheEvictionQueueJobCronTrigger" />
                <ref bean="preOrderJobCronTrigger" />
                <ref bean="deliveryInfoUpdateJobCronTrigger" />
                <ref bean="orderAutoExportProcessorJobCronTrigger" />
                <ref bean="abandonedShoppingCartJobCronTrigger" />
                <ref bean="emptyAnonymousShoppingCartJobCronTrigger" />
                <ref bean="expiredGuestsJobCronTrigger" />
                <ref bean="removeObsoleteProductProcessorJobCronTrigger" />
                <ref bean="customerTagJobCronTrigger" />
                <ref bean="sendMailJobCronTrigger" />
                <ref bean="autoImportJobCronTrigger" />
                <ref bean="imageVaultProcessorJobCronTrigger" />
                <ref bean="productImageVaultCleanupProcessorJobCronTrigger" />
            </list>
        </constructor-arg>
    </bean>

    <!-- Extension for cron triggers example that should be put in "adm-cronjob-ext.xml":
        <bean id="extensionSample" class="org.yes.cart.utils.spring.ArrayListBean">
            <constructor-arg ref="managerCronScheduleTriggers"/>
            <property name="extension">
                <list>
                    <ref bean="customTriggerX" />
                    <ref bean="customTriggerY" />
                    ....
                </list>
            </property>
        </bean>
    -->

    <import resource="classpath*:adm-cronjob-ext.xml"/>

    <bean id="managerCronSchedule" class="org.springframework.scheduling.quartz.SchedulerFactoryBean"
          depends-on="quartzSysPropsSkipUpdateCheck1,quartzSysPropsSkipUpdateCheck2">
        <property name="triggers" ref="managerCronScheduleTriggers"/>
        <property name="quartzProperties">
            <props>
                <prop key="org.quartz.scheduler.skipUpdateCheck">true</prop>
                <prop key="org.terracotta.quartz.skipUpdateCheck">true</prop>
            </props>
        </property>
        <property name="startupDelay" value="10"/><!-- Give context 10sec to stabilise before starting quartz -->
    </bean>

    <!-- ################################ Register module  ####################################################### -->

    <bean class="org.yes.cart.env.impl.ModuleImpl">
        <property name="functionalArea" value="app"/>
        <property name="name" value="jam"/>
        <property name="subName" value="manager-cronjob"/>
    </bean>

</beans>
        
