REF: YC-859 Split category and content domain models

OVERVIEW
========

Refactor Content object to have own domain tree so they can evolve independently.

Refactoring included rework of CMS as a configurable modules with the following
System configurations (SYSTEM_EXTENSION_CFG_PROPERTIES):
* CMS.contentService - ContentService implementor providing base functionality
* CMS.dtoContentService - DtoContentService implementor providing Admin functionality

The following out of the box implementations available:

1) CMS v.1.0.0 original implementation
CMS.contentService=contentServiceCMS1
CMS.dtoContentService=dtoContentServiceCMS1
CMS.contentFileNameStrategy=contentCMS1FileNameStrategy
CMS.contentImageNameStrategy=contentCMS1ImageNameStrategy

2) CMS v.3.6.0 separate content domain implementation (THIS IS NOW DEFAULT)
CMS.contentService=contentServiceCMS3
CMS.dtoContentService=dtoContentServiceCMS3
CMS.contentFileNameStrategy=contentCMS3FileNameStrategy
CMS.contentImageNameStrategy=contentCMS3ImageNameStrategy

Schema changes are required to create schema for CMS3 domain model (2 tables)

When migrating move all category related media files to content directory, i.e. /filevault/category/ to
/filevault/content/ and /imgvault/category/ to /imgvault/content/

E.g.
$ mkdir content
$ cp -R ./category/* ./content/

DEV:
====

Ehcache:

Content menus now have own cache: contentService-currentContentMenu (previously shared cache
categoryService-currentCategoryMenu)

Data migration:

Use XML export descriptor to export existing CMS1 data into an XML file. For this create a new export
descriptor (System > Data Descriptors) using example in impex unit tests: export/xml/content_cms1.xml.
Create export group to include this descriptor. Then run export with export group you created. This will
create an XML file with full extract of all categories in form of content. Create an import descriptor
using example in impex unit tests: import/xml/content_cms3.xml. Create import group to include this
descriptor. Then run import task with import group you created using XML file generated by the export.

Above stated procedure will create an exact copy of all Content (+ additional categories) in form compliant
with CMS3. You can manually remove unnecessary categories that got imported into Content domain but it is
optional.


PRODUCTION:
===========

* Update ehcache.xml to include additional caches
* Run schema-changes.sql to add new tables
* Perform XML export using CONTENT_CMS1_PRETTY exporter and import data using CONTENT_CMS3 importer using
  the exported XML file
* Default CMS version is CMS3 (once code is deployed the CMS will appear blank, use CMS1 configurations in interim, if
  you are unable to transition quickly)
* When transitioning to CMS3 copy all media to content after migration /filevault/category/ to /filevault/content/ and
  /imgvault/category/ to /imgvault/content/

* Removing obsolete CMS1 data
- run the tool to update you DB entries
  !!! WARNING THIS TOOL WILL CHANGE DATA IN YOUR DB             !!!
  !!! MAKE SURE YOU CREATE FULL DB DUMP BEFORE RUNNING THE TOOL !!!

  E.g. from env/migration/migrate-3.5.0-3.6.0/yc859 directory:
  java -Dfile.encoding=UTF-8 -classpath ".:/path/to/derbyclient-10.8.1.2.jar" org.yes.cart.migrationtools.yc859.RemoveCategoryTreeById
  java -Dfile.encoding=UTF-8 -classpath ".:/path/to/mysql-connector-java-5.1.43.jar" org.yes.cart.migrationtools.yc859.RemoveCategoryTreeById

